#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: terraform-aws-vpn-connection
# Tags of this project
tags:
  - aws
  - terraform
  - terraform-modules
  - vpc
  - subnet
  - route
  - route-table
  - vpn
  - vpn-connection
  - site-to-site-vpn-connection
  - virtual-private-gateway
  - customer-gateway
  - ip
  - ip-address
# Categories of this project
categories:
  - terraform-modules/networking
# Logo for this project
#logo: docs/logo.png

# License of this project
license: "APACHE2"
# Canonical GitHub repo
github_repo: cloudposse/terraform-aws-vpn-connection
# Badges to display
badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse/terraform-aws-vpn-connection.svg?style=for-the-badge
    url: https://github.com/cloudposse/terraform-aws-vpn-connection/releases/latest
  - name: Last Updated
    image: https://img.shields.io/github/last-commit/cloudposse/terraform-aws-vpn-connection.svg?style=for-the-badge
    url: https://github.com/cloudposse/terraform-aws-vpn-connection/commits
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://cloudposse.com/slack

# List any related terraform modules that this module may be used with or that this module depends on.
related:
  - name: "terraform-aws-vpc"
    description: "Terraform module that defines a VPC with public/private subnets across multiple AZs with Internet Gateways"
    url: "https://github.com/cloudposse/terraform-aws-vpc"
  - name: "terraform-aws-vpc-peering"
    description: "Terraform module to create a peering connection between two VPCs"
    url: "https://github.com/cloudposse/terraform-aws-vpc-peering"
  - name: "terraform-aws-kops-vpc-peering"
    description: "Terraform module to create a peering connection between a backing services VPC and a VPC created by Kops"
    url: "https://github.com/cloudposse/terraform-aws-kops-vpc-peering"
  - name: "terraform-aws-dynamic-subnets"
    description: "Terraform module for public and private subnets provisioning in existing VPC"
    url: "https://github.com/cloudposse/terraform-aws-dynamic-subnets"
  - name: "terraform-aws-multi-az-subnets"
    description: "Terraform module for multi-AZ public and private subnets provisioning"
    url: "https://github.com/cloudposse/terraform-aws-multi-az-subnets"
  - name: "terraform-aws-named-subnets"
    description: "Terraform module for named subnets provisioning"
    url: "https://github.com/cloudposse/terraform-aws-named-subnets"
# Short description of this project
description: |-
  Terraform module to provision a [site-to-site](https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html) [VPN connection](https://docs.aws.amazon.com/vpc/latest/userguide/vpn-connections.html)
  between a VPC and an on-premises network.

  The module can do the following:

  - Create a Virtual Private Gateway (VPG) and attach it to the VPC
  - Create a Customer Gateway (CGW) pointing to the provided Internet-routable IP address of the external interface on the on-premises network
  - Create a Site-to-Site Virtual Private Network (VPN) connection
  - Request automatic route propagation between the VPG and the provided route tables in the VPC
  - If the VPN connection is configured to use static routes, provision a static route between the VPN connection and the CGW

  Exactly what it does depends on the input parameters. The module is designed to be flexible and can be used in a variety of scenarios.

  - If you supply `customer_gateway_ip_address` and set `transit_gateway_enabled` to `true`, 
    the module will create a CGW, then create a VPN connection, and then assign the connection to
    the Transit Gateway identified by `existing_transit_gateway_id` and the created CGW
  - If you supply `customer_gateway_ip_address` and set `transit_gateway_enabled` to `false`,
    the module will create a VPG and CGW, then create a VPN connection, and then assign it to the VPG and CGW
  - If you do not supply `customer_gateway_ip_address` (set it to `null`) then the module will only create a VPG

  The module also provides some options for adding routes to the VPC or TGW route tables. You need to use
  the options that correspond to the kind of attachment point (VPC or TGW) you are using.

# How to use this project
usage: |-
  ```hcl
    module "vpn_connection" {
      source = "cloudposse/vpn-connection/aws"
      # Cloud Posse recommends pinning every module to a specific version
      # version = "x.x.x"
      namespace                                 = "eg"
      stage                                     = "dev"
      name                                      = "test"
      vpc_id                                    = "vpc-xxxxxxxx"
      vpn_gateway_amazon_side_asn               = 64512
      customer_gateway_bgp_asn                  = 65000
      customer_gateway_ip_address               = "172.0.0.1"
      route_table_ids                           = ["rtb-xxxxxxxx", "rtb-yyyyyyyy", "rtb-zzzzzzzz"]
      vpn_connection_static_routes_only         = "true"
      vpn_connection_static_routes_destinations = ["10.80.1.0/24"]
    }
  ```
include: []
contributors: []
